{"version":3,"sources":["Board.js","utils.js","Game.js","index.js"],"names":["Square","props","react_default","a","createElement","style","color","className","onClick","value","Board","i","_this","this","Board_Square","key","squares","colors","items","table","index","row","column","push","renderSquare","React","Component","calculateWinner","lines","length","_lines$i","Object","slicedToArray","b","c","Game","state","history","Array","fill","positions","stepNumber","xIsNext","ascendingOrder","slice","current","setState","concat","step","_this2","winner","winnerColor","status","moves","map","move","isBold","desc","0","1","2","3","4","5","6","7","8","jumpTo","sort","Board_Board","handleClick","toggleOrder","ReactDOM","render","Game_Game","document","getElementById"],"mappings":"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","file":"static/js/main.35593bf8.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Square = (props) => \r\n  (\r\n    <button style={{color: props.color}}\r\n      className=\"square\" \r\n      onClick={props.onClick}\r\n    >\r\n      {props.value}\r\n    </button>\r\n  );\r\n\r\nexport default class Board extends React.Component {\r\n    renderSquare(i) {\r\n      return (\r\n        <Square key={i}\r\n            value={this.props.squares[i]} \r\n            onClick={() => this.props.onClick(i)}\r\n            color={this.props.colors[i]}\r\n        />\r\n      );\r\n    }\r\n    \r\n    render() {\r\n      let items = [], table = [];\r\n      let index = 0;\r\n      for (let row = 0; row < 3; row++) {\r\n        for (let column = 0; column < 3; column++) {\r\n          items.push(this.renderSquare(index++))\r\n        }\r\n        table.push(<div key={\"row-\"+row} className=\"board-row\">{items}</div>);\r\n        items = [];\r\n      }\r\n  \r\n      return (\r\n        <div>\r\n          {table}\r\n        </div>\r\n      );\r\n    }\r\n}","const calculateWinner = (squares) => {\r\n    const lines = [\r\n      [0, 1, 2],\r\n      [3, 4, 5],\r\n      [6, 7, 8],\r\n      [0, 3, 6],\r\n      [1, 4, 7],\r\n      [2, 5, 8],\r\n      [0, 4, 8],\r\n      [2, 4, 6],\r\n    ];\r\n    for (let i = 0; i < lines.length; i++) {\r\n      const [a, b, c] = lines[i];\r\n      if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n        return [a, b, c];\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\nconst getCoordinatesFromSquare = (square) =>{\r\n    const coord = {\r\n      0: '1, 1',\r\n      1: '1, 2',\r\n      2: '1, 3',\r\n      3: '2, 1',\r\n      4: '2, 2',\r\n      5: '2, 3',\r\n      6: '3, 1',\r\n      7: '3, 2',\r\n      8: '3, 3'\r\n    };\r\n\r\n    return coord[square];\r\n  }\r\n\r\nexport {calculateWinner, getCoordinatesFromSquare}","import React from 'react';\r\nimport Board from './Board';\r\nimport {calculateWinner, getCoordinatesFromSquare} from './utils';\r\n\r\n//const winnerColor = 'green';\r\n\r\nexport default class Game extends React.Component {\r\n\r\n    state = {\r\n        history: [{\r\n          squares: Array(9).fill(null),\r\n          positions: Array(9).fill(null),\r\n          colors: Array(9).fill('black')\r\n        }],\r\n        stepNumber: 0,\r\n        xIsNext: true,\r\n        ascendingOrder: true\r\n    };\r\n\r\n    handleClick(i) {\r\n      const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n      const current = history[history.length - 1];\r\n      const squares = current.squares.slice();\r\n      const colors = current.colors.slice();\r\n      const positions = current.positions.slice();\r\n      const winner = calculateWinner(squares);\r\n  \r\n      if (winner || squares[i]) {\r\n        return;\r\n      }\r\n  \r\n      squares[i] = this.state.xIsNext ? 'X':'O';\r\n      positions[history.length - 1] = i;\r\n  \r\n      this.setState({\r\n          history: history.concat([{\r\n            squares: squares,\r\n            positions: positions,\r\n            colors: colors\r\n          }]),\r\n          stepNumber: history.length,\r\n          xIsNext: !this.state.xIsNext\r\n      });\r\n    }\r\n    jumpTo(step) {\r\n      this.setState({\r\n        stepNumber: step,\r\n        xIsNext: (step % 2) === 0,\r\n      });\r\n    }\r\n    toggleOrder() {\r\n      this.setState({\r\n        ascendingOrder: !this.state.ascendingOrder\r\n      });\r\n    }\r\n    render() {\r\n      let history = this.state.history;\r\n      const current = history[this.state.stepNumber];\r\n      const winner = calculateWinner(current.squares);\r\n  \r\n      if(winner){\r\n        current.colors[winner[0]] = this.props.winnerColor;\r\n        current.colors[winner[1]] = this.props.winnerColor;\r\n        current.colors[winner[2]] = this.props.winnerColor;\r\n      }\r\n        \r\n      const moves = history.map((step, move) => {\r\n        const isBold = (step===current)? true : false;\r\n        const desc = move ?\r\n          'Go to move #' + move + '('+getCoordinatesFromSquare(step.positions[move - 1])+')' :\r\n          'Go to game start';\r\n        return (\r\n          <li key={move}>\r\n            <button onClick={() => this.jumpTo(move)}>{(isBold)? <strong>{desc}</strong> : desc}</button>\r\n          </li>\r\n        );\r\n      });\r\n  \r\n      let status;\r\n      if (winner) {\r\n        status = 'Winner: ' + winner;\r\n      } else if(history.length === 10) {\r\n        status = 'Match draw';\r\n      } else {\r\n        status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n      }\r\n  \r\n      if (!this.state.ascendingOrder) {\r\n        moves.sort((a,b) => { return b.key - a.key; });\r\n      }\r\n        \r\n      return (\r\n        <div className=\"game\">\r\n          <div className=\"game-board\">\r\n            <Board \r\n              squares={current.squares}\r\n              colors={current.colors}\r\n              onClick={(i) => this.handleClick(i)}\r\n            />\r\n          </div>\r\n          <div className=\"game-info\">\r\n            <div>{status}</div>\r\n            <button onClick={() => this.toggleOrder()}>Change order</button>\r\n            <ol>{moves}</ol>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n  }","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport Game from './Game';\r\nimport './index.css';\r\n\r\n  \r\n  ReactDOM.render(\r\n    <Game winnerColor='green' />,\r\n    document.getElementById('root')\r\n  );"],"sourceRoot":""}